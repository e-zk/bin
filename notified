#!/bin/sh
# notified: notification daemon
#           listens for input on $FIFO
#           and shows a notification
# depends: lemonbar, txtw, skroll, bar.conf
# usage: notified &
#        echo "hello! $(date)" > $HOME/tmp/notified

# you'll probably want to change these...
CONFIG=${HOME}/etc/bar.conf
FIFO=${HOME}/var/notified.fifo
PIDFILE=${HOME}/var/notified.pid
DELAY=3

# trap = cleanup
trap cleanup 1 2 3 6 14 15

# set color information
FG=''
BG=''

# import the config file if it exists
if [ -f "$CONFIG" ]; then
	. "$CONFIG"
else
	echo "error: config '${CONFIG}' does not exist! exiting."
	exit 1
fi

WIDTH=$width

# cleanup
cleanup() {
	rm -f "$PIDFILE"
	exit
}

# show a notificaiton
show_notif() {
	message=" ${1} "
	skroll=0
	unset width
	width=${BAR_WIDTH:-$(txtw -f "${font}" "XX${message}XX")}
	if [ $width -gt 400 ]; then
		width=400
		skroll=1
	fi
	#xpos=$((960-(width/2)))
	xpos=$((1920 - width - 40))
	#ypos=${ypos:-0}
	ypos=40
	
	if [ $skroll -eq 1 ]; then
		(echo "$message" | skroll -n 50 -r)
	else
		(echo "%{c}${message}%{l}"; sleep ${DELAY})
	fi | lemonbar -d -g ${width}x${height}+${xpos}+${ypos} \
	     -f "$font" -F ${FG} -B ${BG}
}


# if the fifo does not exist, create it
check_fifo() {
	if [ ! -p "$FIFO" ]; then
		echo "warn: '${FIFO}' does not exist or is not a FIFO."
		echo "      ...creating '${FIFO}'."
		rm -f "$FIFO"
		mkfifo "$FIFO"
	fi
}

# if the pid file exists, then notified should not run; if it does not exist,
# then create it and add our PID to it
check_pid() {
	if [ -f "$PIDFILE" ]; then
		if [ "$(cat $PIDFILE)" != "$$" ]; then
			echo "error: notified is already running!"
			echo "       ...exiting."
			exit 1
		fi
	else
		echo "$$" > "$PIDFILE"
	fi
}

check_pid
check_fifo

# main loop 
while true; do

	# get content form fifo
	content="$(cat $FIFO)"

	# if the fifo's content is non-null
	if [ -n "$content" ]; then

		# by default the notification message is the entire content
		message="$content"

		FG=$foreground # reset FG color
		BG=$background # reset BG color

		# if the content contains a ':' (options separator)
		case "$content" in
		*:*)
			# the options list is the text before the first ':' 
			opts=${content%%:*}
			options=$(echo "$opts" | sed -e 's/,/ /g')

			# the message is all the text after '${opts}:'
			message=${content##${opts}:}    
			
			# options parsing
			for opt in ${options}; do
				case "$opt" in
					alert)
						# alert: change color to red
						FG='#ff2233'
						BG='#000000'
						;;
					fg*)
						FG="${opt##fg}"
						;;
					bg*)
						BG="${opt##bg}"
						;;
					d*)
						DELAY=${opt##d}
						;;
					w*)
						WIDTH=${opt##w}
						;;
					*)
						# unrecognised option, print the whole text
						message="$content"
						;;
				esac
			done
		;;
		esac

		# finally, show the notification
		show_notif "$message"
	fi
done

# :)
cleanup
